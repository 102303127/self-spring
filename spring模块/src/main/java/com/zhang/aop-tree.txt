
│  tr.txt
│  
├─aop
│  │  Advisor.java                                 ## Advisor是Pointcut和Advice的组合
│  │  AdvisorChainFactory.java                     ## 获取拦截器和动态拦截建议接口
│  │  ClassFilter.java
│  │  DefaultAdvisorChainFactory.java              ## AdvisorChainFactory的默认实现类
│  │  Pointcut.java                                ## 切点
│  │  PointcutAdvisor.java
│  │  ReflectiveMethodInvocation.java              ## 反射式方法调用，主要用来调用拦截器
│  │
│  ├─adapter                                       ## 两种Aop方式的适配器 用来调用拦截器方法
│  │      AfterReturningAdviceInterceptor.java
│  │      MethodBeforeAdviceInterceptor.java
│  │
│  ├─advice
│  │      AfterAdvice.java
│  │      AfterReturningAdvice.java                ## 在方法返回后调用的
│  │      BeforeAdvice.java
│  │      MethodBeforeAdvice.java                  ## 在方法执行前调用的
│  │
│  ├─advised
│  │      AdvisedSupport.java
│  │      ProxyFactory.java                        ## 根据限定条件创建相应的 AopProxy
│  │
│  ├─aspectj
│  │      AspectJExpressionPointcut.java           ## AspectJ切点 Pointcut的实现类
│  │      AspectJExpressionPointcutAdvisor.java    ## 存放Pointcut和Advice PointcutAdvisor的实现类
│  │
│  ├─autoproxy
│  │      AbstractAutoProxyCreator.java            ## Aop程序的入口以及主要实现
│  │      DefaultAdvisorAutoProxyCreator.java      ## 主要实现查找目标源相关的 advice和 advisors
│  │
│  ├─proxy
│  │      AopProxy.java                            ## 两种代理方式 默认使用 CglibAopProxy
│  │      CglibAopProxy.java                       ## cglib创建出来的代理对象是被代理对象的子类
│  │      JdkDynamicAopProxy.java                  ## jdk创建出的代理对象和目标源同一个接口的实现类
│  │
│  ├─support
│  │      AopUtils.java
│  │
│  └─target
│          MethodMatcher.java                      ## 判断方法是否符合定义的切入点（pointcut）的条件
│          TargetSource.java                       ## 被代理的目标对象
